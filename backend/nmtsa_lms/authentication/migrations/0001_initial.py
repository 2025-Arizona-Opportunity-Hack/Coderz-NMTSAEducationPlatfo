# Generated by Django 5.2.7 on 2025-10-10 00:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'enrollments',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(blank=True, choices=[('parent', 'Parent'), ('guardian', 'Guardian'), ('caregiver', 'Professional Caregiver'), ('family', 'Family Member'), ('self', 'Self'), ('professional', 'Healthcare Professional'), ('other', 'Other')], help_text='Relationship to care recipient', max_length=20)),
                ('care_recipient_name', models.CharField(blank=True, help_text='Name of person receiving care (optional)', max_length=200)),
                ('care_recipient_age', models.PositiveIntegerField(blank=True, help_text='Age of care recipient', null=True)),
                ('special_needs', models.TextField(blank=True, help_text='Special needs, conditions, or considerations for course recommendations')),
                ('learning_goals', models.TextField(blank=True, help_text='What the student hopes to learn/achieve')),
                ('interests', models.TextField(blank=True, help_text='Specific areas of interest for course recommendations')),
                ('accessibility_needs', models.TextField(blank=True, help_text='Any accessibility requirements for learning')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'student_profiles',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Professional bio')),
                ('credentials', models.TextField(blank=True, help_text='Professional credentials (degrees, certifications)')),
                ('resume', models.FileField(blank=True, help_text='Resume/CV file', null=True, upload_to='teacher_resumes/')),
                ('certifications', models.FileField(blank=True, help_text='Certification documents', null=True, upload_to='teacher_certifications/')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Admin verification status', max_length=10)),
                ('verification_notes', models.TextField(blank=True, help_text='Admin notes about verification')),
                ('verified_at', models.DateTimeField(blank=True, help_text='Timestamp when verified by admin', null=True)),
                ('specialization', models.CharField(blank=True, help_text='Area of specialization (e.g., Neurologic Music Therapy)', max_length=200)),
                ('years_experience', models.PositiveIntegerField(blank=True, help_text='Years of professional experience', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'teacher_profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(blank=True, choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin')], help_text='User role in the system', max_length=10, null=True)),
                ('auth0_id', models.CharField(blank=True, help_text='Auth0 user ID', max_length=255, null=True, unique=True)),
                ('profile_picture', models.URLField(blank=True, help_text="URL to user's profile picture from OAuth provider", max_length=500, null=True)),
                ('onboarding_complete', models.BooleanField(default=False, help_text='Whether user has completed onboarding')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
